@ARTICLE{Aghayi2022-vp,
  title    = "A controlled experiment on the impact of microtasking on
              programming",
  author   = "Aghayi, Emad and LaToza, Thomas D",
  abstract = "In microtask programming, developers complete short
              self-contained microtasks through the use of a specialized
              programming environment. For example, given only a short
              description of the purpose of a function and a partially complete
              implementation, a developer might be asked to identify, test, and
              implement an additional behavior in the function. Adopting a
              microtask approach to programming tasks has been envisioned to
              offer a number of potential benefits, including reducing the
              onboarding time necessary for new developers to contribute to a
              project and achieving higher project velocity by enabling larger
              project teams and greater parallelism. To investigate the
              potential benefits and drawbacks of microtask programming we
              conducted a controlled experiment. We focused our investigation
              on the context in which microtasking is most widely used,
              implementing and debugging function bodies, and investigated the
              impact of microtasking with respect to onboarding, project
              velocity, code quality, and developer productivity. 28 developers
              worked to implement microservice endpoints, either in the form of
              traditional programming tasks described in an issue tracker or as
              programming microtasks. Our study did not examine the design
              effort necessary to prepare for microtask programming or consider
              how microtask programming might be applied to maintenance tasks.
              We found that, compared to traditional programming, microtask
              programming reduced onboarding time by a factor of 3.7, increased
              project velocity by a factor of 5.76 by increasing team size by a
              factor of 7, and decreased individual developer productivity by a
              factor of 1.3. The quality of code did not significantly differ.
              Through qualitative analysis of how developers worked, we explore
              potential explanations of these differences. These findings offer
              evidence for the potential benefits that adopting microtask
              programming might bring, particularly in cases where increasing
              project velocity is paramount.",
  journal  = "Empirical Software Engineering",
  volume   =  28,
  number   =  1,
  pages    = "10",
  month    =  nov,
  year     =  2022
}
